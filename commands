#!/bin/bash
set -e;

# Check if name is specified
if [[ $1 == mongo:* ]]; then
    if [[ -z $2 ]]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        # Check if app exists with the same name
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi
fi

case "$1" in

  mongo:create)
    MONGO_IMAGE=mongo/$APP
    # Check if Mongo container is installed
    IMAGE=$(docker images | grep "timchen/mongo " |  awk '{print $3}')
    if [[ -z $IMAGE ]]; then
        echo "Mongo image not found... Did you run 'dokku plugins-install' ?"
        exit 1
    fi

    # Check if an existing DB volume exists
    HOST_DIR="$DOKKU_ROOT/.mongo/volume-$APP"
    if [[ -d $HOST_DIR ]]; then
        echo
        echo "-----> Reusing mongo/$APP database"
    else
        mkdir -p $HOST_DIR
    fi
    VOLUME="$HOST_DIR:/data/db"
    # Stop existing container with the same persistent Mongo
    ID=$(docker ps | grep "$MONGO_IMAGE":latest |  awk '{print $1}')
    if [[ ! -z "$ID" ]]; then
        docker stop $ID > /dev/null
    fi
    # Fork Mongo image
    ID=$(docker run -d timchen/mongo exit 0)
    docker wait $ID > /dev/null
    IMAGE=$(docker commit $ID)
    docker tag $IMAGE $MONGO_IMAGE
    # Launch container
    ID=$(docker run -v $VOLUME -p 27017 -d $MONGO_IMAGE \
      /usr/bin/mongod)
    sleep 4
    # Link to a potential existing app
    dokku mongo:link $APP $APP
    echo
    echo "-----> Mongo container created: $MONGO_IMAGE"
    sleep 1
    dokku mongo:info $APP
    ;;

  mongo:delete)
    MONGO_IMAGE=mongo/$APP
    # Stop the container
    ID=$(docker ps -a | grep "$MONGO_IMAGE":latest |  awk '{print $1}')
    if [[ ! -z $ID ]]; then
        docker stop $ID
    fi
    # Remove image
    IMAGE=$(docker images | grep "$MONGO_IMAGE " |  awk '{print $1}')
    if [[ ! -z $IMAGE ]]; then
        docker rmi $IMAGE
    fi
    # Remove persistent volume
    HOST_DIR="$DOKKU_ROOT/.mongo/volume-$APP"
    if [[ -d $HOST_DIR ]]; then
        rm -rf $HOST_DIR
    fi
    echo
    echo "-----> Mongo container deleted: $MONGO_IMAGE"
    ;;

  mongo:info)
    MONGO_IMAGE=mongo/$APP
    ID=$(docker ps -a | grep "$MONGO_IMAGE":latest |  awk '{print $1}')
    IP=$(docker inspect $ID | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
    PORT=$(docker port $ID 27017)
    echo
    echo "       Host: $IP"
    echo "       Public port: $PORT"
    echo
    ;;

  mongo:link)
    if $APP_EXISTS; then
        # Check argument
        if [[ -z $3 ]]; then
            echo "You must specify a container name"
            exit 1
        fi
        MONGO_IMAGE="mongo/$3"
        ID=$(docker ps -a | grep "$MONGO_IMAGE":latest |  awk '{print $1}')
        if [[ ! -z "$ID" ]]; then
            IP=$(docker inspect $ID | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
            
            if [[ ! -f "$DOKKU_ROOT/$APP/ENV" ]]; then
                touch "$DOKKU_ROOT/$APP/ENV"
            fi
            
            # Only set once! This will cause an infinite loop
            # unless you make sure it hasn't already been run!
            if [[ -z $(dokku config:get "$APP" MONGO_DATABASE) ]]; then
                dokku config:set "$APP" MONGO_DATABASE="${APP}" \
                MONGODB_HOST="${IP}" \
                MONGODB_PORT="27017" \
                MONGODB_USERNAME="$mongodb_username" \
                MONGODB_PASSWORD="$mongodb_password"
                #MONGO_URL="mongodb://${mongodb_username}:${mongodb_password}@${mongodb_private_ip}:${mongodb_port}/${mongodb_database}"
            fi
            
            echo
            echo "-----> $APP linked to $MONGO_IMAGE container"
        fi
    fi
    ;;

  mongo:logs)
    MONGO_IMAGE=mongo/$APP
    ID=$(docker ps -a | grep "$MONGO_IMAGE" |  awk '{print $1}')
    docker logs $ID | tail -n 100
    ;;

  help)
    cat && cat<<EOF
    mongo:create <app>     Create a Mongo container
    mongo:delete <app>     Delete specified Mongo container
    mongo:info <app>       Display container informations
    mongo:link <app> <rd>  Link an app to a Mongo container
    mongo:logs <app>       Display last logs from Mongo container
EOF
    ;;

esac
